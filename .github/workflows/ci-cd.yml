name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * *' # Daily at 2 AM UTC

jobs:
  # Quality Gates
  code-quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Check TypeScript
        run: npm run build

      - name: Format check
        run: |
          npm run format:check || {
            echo "Code formatting issues found. Run 'npm run format' to fix."
            exit 1
          }

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20, 22]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run unit tests
        run: npm test -- --coverage --testPathPattern="src/.*\.test\.ts$" --testPathIgnorePatterns="src/.*\.(e2e|performance|smoke)\.test\.ts$"

      - name: Upload coverage to Codecov
        if: matrix.node-version == 20
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run integration tests
        run: npm test -- --testNamePattern="integration" --testTimeout=300000
        env:
          CI: true

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run E2E tests
        run: npm test -- --testPathPattern="src/e2e\.test\.ts$" --testTimeout=600000
        env:
          CI: true

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run performance tests
        run: npm test -- --testPathPattern="src/performance\.test\.ts$" --testTimeout=600000
        env:
          NODE_OPTIONS: "--max-old-space-size=4096"
          CI: true

      - name: Performance benchmark
        run: |
          echo "Performance benchmark results:" > performance-report.txt
          npm test -- --testPathPattern="src/performance\.test\.ts$" --verbose >> performance-report.txt 2>&1 || true

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.txt
          retention-days: 30

  # Smoke Tests
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run smoke tests
        run: npm test -- --testPathPattern="src/smoke\.test\.ts$" --testTimeout=60000
        env:
          CI: true

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Run dependency check
        run: |
          npx audit-ci --high || {
            echo "High severity vulnerabilities found!"
            exit 1
          }

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          config-file: ./.github/codeql/codeql-config.yml

      - name: Build for CodeQL
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Configuration Testing
  config-tests:
    name: Configuration Tests
    runs-on: ubuntu-latest
    needs: [unit-tests]
    strategy:
      matrix:
        config:
          - complexity-threshold: 20
            max-depth: 2
            name: "low-complexity"
          - complexity-threshold: 40
            max-depth: 3
            name: "medium-complexity"
          - complexity-threshold: 60
            max-depth: 4
            name: "high-complexity"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Test configuration - ${{ matrix.config.name }}
        run: npm test -- --testNamePattern="configuration" --testTimeout=180000
        env:
          INPUT_COMPLEXITY_THRESHOLD: ${{ matrix.config.complexity-threshold }}
          INPUT_MAX_DEPTH: ${{ matrix.config.max-depth }}
          CONFIG_NAME: ${{ matrix.config.name }}

  # Action Testing
  action-test:
    name: Action Self-Test
    runs-on: ubuntu-latest
    needs: [smoke-tests]
    permissions:
      contents: read
      issues: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Create test PRD
        run: |
          mkdir -p test-docs
          cat > test-docs/test.prd.md << 'EOF'
          # Test PRD for CI/CD
          
          ## Overview
          This is a test PRD for validating the CI/CD pipeline.
          
          ## Requirements
          - Basic functionality test
          - Integration validation
          - Performance baseline
          
          ## Technical Details
          Simple test case for automated validation.
          EOF

      - name: Test action (dry-run)
        uses: ./
        with:
          dry-run: true
          prd-path-glob: 'test-docs/**.prd.md'
          complexity-threshold: 30
          max-depth: 2

      - name: Cleanup test files
        run: rm -rf test-docs

  # Documentation Tests
  docs-test:
    name: Documentation Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check documentation completeness
        run: |
          # Check required documentation files
          required_files=(
            "README.md"
            "docs/API.md"
            "docs/SETUP_TROUBLESHOOTING.md"
            "docs/CLI_INTEGRATION.md"
            "docs/RECOVERY_REPLAY_WORKFLOW.md"
          )
          
          for file in "${required_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Missing required documentation: $file"
              exit 1
            fi
          done

      - name: Check markdown syntax
        run: |
          # Install markdown linter
          npm install -g markdownlint-cli
          
          # Lint all markdown files
          markdownlint README.md docs/*.md || {
            echo "Markdown linting failed. Please fix markdown issues."
            exit 1
          }

      - name: Validate links
        run: |
          # Check for broken links in documentation
          find . -name "*.md" -exec grep -l "http" {} \; | while read file; do
            echo "Checking links in $file"
            # This is a simplified check - in production, use a proper link checker
            grep -o 'http[^)]*' "$file" | head -5
          done

  # Release Preparation
  release-prep:
    name: Release Preparation
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [
      code-quality,
      integration-tests,
      e2e-tests,
      performance-tests,
      smoke-tests,
      security-scan,
      config-tests,
      action-test,
      docs-test
    ]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Generate release notes
        run: |
          echo "# Release Notes" > release-notes.md
          echo "" >> release-notes.md
          echo "## Changes" >> release-notes.md
          git log --oneline --since="$(git describe --tags --abbrev=0 2>/dev/null || echo '1 month ago')" >> release-notes.md

      - name: Create release artifact
        run: |
          mkdir -p release
          cp -r dist/* release/
          cp package.json release/
          cp README.md release/
          cp -r docs release/

      - name: Upload release artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ github.sha }}
          path: release/
          retention-days: 90

  # Performance Monitoring
  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'push'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run performance benchmarks
        run: |
          echo "Running performance benchmarks..."
          npm test -- --testPathPattern="src/performance\.test\.ts$" --verbose > performance-results.txt 2>&1
          
          # Extract key metrics
          echo "## Performance Metrics" > performance-summary.md
          echo "- Date: $(date)" >> performance-summary.md
          echo "- Commit: ${{ github.sha }}" >> performance-summary.md
          echo "" >> performance-summary.md
          
          # Parse performance results (customize based on your test output)
          grep -E "(completed in|Processing time|Memory usage)" performance-results.txt >> performance-summary.md || true

      - name: Upload performance results
        uses: actions/upload-artifact@v4
        with:
          name: performance-monitoring-${{ github.run_number }}
          path: |
            performance-results.txt
            performance-summary.md
          retention-days: 30

  # Deployment (when applicable)
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [release-prep]
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download release artifact
        uses: actions/download-artifact@v4
        with:
          name: release-${{ github.sha }}
          path: release/

      - name: Deploy to production
        run: |
          echo "Deploying to production..."
          # Add deployment logic here
          # This could include:
          # - Updating GitHub releases
          # - Publishing to npm registry
          # - Updating action marketplace
          # - Deploying documentation

      - name: Post-deployment smoke test
        run: |
          echo "Running post-deployment smoke test..."
          # Add post-deployment validation
          # This could include:
          # - Testing deployed action
          # - Validating documentation
          # - Checking service health

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    if: always()
    needs: [
      code-quality,
      unit-tests,
      integration-tests,
      e2e-tests,
      performance-tests,
      smoke-tests,
      security-scan,
      config-tests,
      action-test,
      docs-test,
      performance-monitoring
    ]
    steps:
      - name: Cleanup artifacts
        run: |
          echo "Cleaning up temporary artifacts..."
          # Add cleanup logic for temporary files, caches, etc.

  # Notification
  notification:
    name: Notification
    runs-on: ubuntu-latest
    if: always()
    needs: [
      code-quality,
      unit-tests,
      integration-tests,
      e2e-tests,
      performance-tests,
      smoke-tests,
      security-scan,
      config-tests,
      action-test,
      docs-test
    ]
    steps:
      - name: Send notification
        if: failure()
        run: |
          echo "CI/CD Pipeline failed. Check the logs for details."
          # Add notification logic here:
          # - Slack notifications
          # - Email alerts
          # - Issue creation
          # - Teams notifications

      - name: Success notification
        if: success()
        run: |
          echo "CI/CD Pipeline completed successfully!"
          # Add success notification logic